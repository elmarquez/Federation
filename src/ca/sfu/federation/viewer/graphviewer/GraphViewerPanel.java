/**
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 59
 * Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */
package ca.sfu.federation.viewer.graphviewer;

import ca.sfu.federation.Application;
import ca.sfu.federation.ApplicationContext;
import ca.sfu.federation.model.IContext;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JToolBar;

/**
 * Displays dependancy graph for an IContext.  Some display objects may provide 
 * thumbnails or icon views which are then rendered in the graph.
 * TODO: need a proper set of controls on the toolbar, and key mappings to zoom/pan actions
 * @author  Davis Marques
 */
public class GraphViewerPanel extends javax.swing.JPanel implements MouseListener, Observer {

    private static final Logger logger = Logger.getLogger(GraphViewerPanel.class.getName());

    private JToolBar toolBar;
    private IContext context;

    //-------------------------------------------------------------------------

    /**
     * GraphViewerPanel default constructor
     */
    public GraphViewerPanel() {
        initComponents();
        // observe the model for changes
        Application.getContext().addObserver(this);
        this.addMouseListener(this);
    }

    //-------------------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Build a visual graph to depict the Context model.
     */
    private void buildScene() {
        // stop observing the prior context if it still exists
        if (context != null && context instanceof Observable) {
            Observable o = (Observable) context;
            o.deleteObserver(this);
        }
        // clear the current view
        this.jScrollPane1.getViewport().removeAll();
        // get the new context
        context = (IContext) Application.getContext().getViewState(ApplicationContext.VIEWER_CURRENT_CONTEXT);
        if (context == null) return;
        logger.log(Level.INFO,"Graph view context set to {0}", context.getCanonicalName());
        // if we have already created a scene for this context, restore it
        // else create a new scene
        MutableSceneModel scene;
        JComponent view;
        Map<String,Object> scenes = (Map<String,Object>) Application.getContext().getViewState(ApplicationContext.VIEWER_ICONTEXTVIEWER_SCENES);
        if (scenes != null && scenes.containsKey(context.getCanonicalName())) {
            logger.log(Level.INFO,"Retrieving graph for {0}", context.getCanonicalName());
            // fetch the existing scene from the scene list
            scene = (MutableSceneModel) scenes.get(context.getCanonicalName());
            scene.validate();
        } else {
            logger.log(Level.INFO,"Creating new graph for {0}", context.getCanonicalName());
            // create a new scene, add it to the scene list
            scene = new MutableSceneModel(context);
            if (scenes != null) {
                scenes.put(context.getCanonicalName(),scene);
            } else {
                HashMap<String,Object> map = new HashMap<String,Object>();
                map.put(context.getCanonicalName(),scene);
                Application.getContext().setViewState(ApplicationContext.VIEWER_ICONTEXTVIEWER_SCENES, map);
            }
        }
        // add the new scene to the scrollpane
        view = scene.createView();
        this.jScrollPane1.setViewportView(view);
        // observe the context for changes
        if (context instanceof Observable) {
            Observable o = (Observable) context;
            o.addObserver(this);
        }
        // revalidate and repaint the panel
        // this.validate();
    }

    /**
     * Handle mouse clicked event. Get the coordinates for the last mouse
     * release event.
     * @param e Mouse event.
     */
    public void mouseClicked(MouseEvent e) {
    }

    public void mouseEntered(MouseEvent e) {
    }

    public void mouseExited(MouseEvent e) {
    }

    /**
     * Handle mouse pressed event.
     * @param e
     */
    public void mousePressed(MouseEvent e) {
    }

    /**
     * Handle mouse released event.
     * @param e
     */
    public void mouseReleased(MouseEvent e) {
        logger.log(Level.INFO,"Mouse released {0}", e.getPoint().getLocation().toString());
        Point p = e.getPoint();
        Application.getContext().setViewState(ApplicationContext.VIEWER_LAST_MOUSERELEASE,p);
    }

    /**
     * Update event.
     * @param o Observable object.
     * @param arg Update argument.
     */
    public void update(Observable o, Object arg) {
        if (arg instanceof Integer) {
            Integer eventId = (Integer) arg;
            switch (eventId) {
                case ApplicationContext.MODEL_LOADED:
                    // update the graph
                    buildScene();
                    break;
                case ApplicationContext.MODEL_CLOSED:
                    // release all resources
                    this.context = null;
                    this.jScrollPane1.getViewport().removeAll();
                    break;
                case ApplicationContext.EVENT_CONTEXT_CHANGE:
                    // update the graph
                    this.buildScene();
                    break;
                case ApplicationContext.EVENT_STATE_CHANGE:
                    logger.log(Level.WARNING,"State change handler not implemented");
                    break;
            }
        }
    }

}
