/**
 * IContext.java
 * Copyright (c) 2006 Davis M. Marques <dmarques@sfu.ca>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation; either version 2 of the License, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc., 59
 * Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package ca.sfu.federation.model;

import java.util.List;
import java.util.Map;

/**
 * A collection of INamedObjects.
 * @author Davis Marques
 * @version 0.0.2
 */
public interface IContext extends INamed {

    /** 
     * Add NamedObject to the Context.
     * @param Named NamedObject to add to the Context.
     * @throws IllegalArgumentException An object identified by the same name already exists in the Context.
     */
    public void add(INamed Named) throws IllegalArgumentException;
    
    /**
     * Get Element collection.
     * @return Collection of NamedObjects in this context.
     */
    public Map getElements();

    /**
     * Get List of Parent Contexts, inclusive of the current element.  The list 
     * is ordered from root context to the current element.  An instance of 
     * ParametricModel will always be the first element.
     * @return List of Parent contexts.
     */
    public List getParents();
    
    /**
     * Determine if a NamedObject exists in the local collection.
     * @return True if NamedObject is in the collection, false otherwise.
     */
    public boolean hasObject(String Name);
    
    /**
     * Looks up an object or object property value of the form object.property
     * @param Query A NamedObject reference of the form objectname.propertyname
     * @throws IllegalArgumentException The object reference could not be resolved.
     */
    public Object lookup(String Query) throws IllegalArgumentException;

    /**
     * Remove a NamedObject from the Context.
     * @param Named NamedObject to be removed from the Context.
     */
    public void remove(INamed Named);
    
} // end interface
